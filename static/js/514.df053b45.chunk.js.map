{"version":3,"file":"static/js/514.df053b45.chunk.js","mappings":"oiBA6GA,EArFgB,WACd,OAAsCA,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,MAAV,IAC1BG,GAAOF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,KAAf,IACxBC,GAAQJ,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKE,KAAf,KAE/BC,EAAAA,EAAAA,YAAU,WACRC,IAAAA,cAAyB,SACzBT,GAASU,EAAAA,EAAAA,IAAgBR,GAC1B,GAAE,CAACA,EAAQF,IAKZ,OACE,2BACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAiBW,GAAG,OAApB,WACE,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,MAAO,GAAIC,QAAS,IAChDC,SAAU,SAAAC,GAAC,OAAIjB,GAASkB,EAAAA,EAAAA,IAAaD,GAA1B,EAFb,UAIE,UAAC,KAAD,YACI,0CAEE,SAAC,KAAD,CACEE,KAAK,QACLC,KAAK,OACLC,KAAK,SACLC,YAAY,oBAEd,qBAAUX,GAAG,SAAb,SACGY,EAAAA,KAAU,SAAAC,GACT,OACE,mBAAQC,MAAOD,EAAf,SACGA,GCzCP,eAACE,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACnB,EAAIoB,GAWvD,OAREpB,IAFFoB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDwC8BG,GAI7B,UAGL,8CAEE,SAAC,KAAD,CAAcC,GAAG,SAAShB,KAAK,QAA/B,UACE,mBAAQM,MAAM,GAAd,wBAGN,iDAEE,UAAC,KAAD,YACE,SAAC,KAAD,CACEN,KAAK,cACLC,KAAK,SACLE,YAAY,UAEd,SAAC,KAAD,CACEA,YAAY,KACZH,KAAK,YACLC,KAAK,kBAKX,mBAAQA,KAAK,SAAb,0BAGJ,SAAC,KAAD,UACGf,EAAK+B,KAAI,SAAAC,GACR,OACE,SAACC,EAAA,EAAD,CACED,IAAKA,EAELE,MAAOxC,GADFsC,EAAI1B,GAId,OAEb,SAAC,KAAD,UAAoBJ,GAAO,SAAC,KAAD,CAAmBiC,QAAS,kBAAMxC,GAASyC,EAAAA,EAAAA,IAASvC,GAAxB,EAA5B,wBAA8F,sBAC/G,SAACwC,EAAA,EAAD,CAAO5C,YAAaA,EAAa6C,WApEtB,WACjB5C,GAAe,GACfC,GAAS4C,EAAAA,EAAAA,IAAiB,IAC3B,UAsEF,C","sources":["components/Catalog/Catalog.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  StyledBrandInput,\n  StyledBtnLoadMore,\n  StyledContainer,\n  StyledForm,\n  StyledInputFrom,\n  StyledInputTo,\n  StyledLoadMoreDiv,\n  StyledMileageDiv,\n  StyledSection,\n  StyledSelect,\n  StyledUl,\n} from './Catalog.styled';\nimport ReactModal from 'react-modal';\nimport marks from '../../car-marks/makes.json';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilteredCars, loadMore } from 'api/api';\nimport { CarCard } from 'components/CarCard/CarCard';\nimport { changeFilter } from 'redux/slices/filterSlice';\nimport { changeChoosenCar } from 'redux/slices/carsSlice';\nimport { Modal } from 'components/Modal/Modal';\nconst Catalog = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n  const cars = useSelector(state => state.cars.items);\n  const total = useSelector(state => state.cars.total);\n\n  useEffect(() => {\n    ReactModal.setAppElement('#main');\n    dispatch(getFilteredCars(filter))\n  }, [filter, dispatch]);\n  const closeModal = () => {\n    setModalIsOpen(false);\n    dispatch(changeChoosenCar(''));\n  };\n  return (\n    <main>\n      <StyledSection>\n        <StyledContainer id=\"main\">\n          <Formik\n            initialValues={{ brand: '', price: '', mileage: '' }}\n            onSubmit={e => dispatch(changeFilter(e))}\n          >\n            <StyledForm>\n                <label>\n                  Car brand\n                  <StyledBrandInput\n                    name=\"brand\"\n                    type=\"text\"\n                    list=\"brands\"\n                    placeholder=\"Enter the text\"\n                  />\n                  <datalist id=\"brands\">\n                    {marks.map(mark => {\n                      return (\n                        <option value={mark} key={nanoid()}>\n                          {mark}\n                        </option>\n                      );\n                    })}\n                  </datalist>\n                </label>\n                <label>\n                  Price/ 1 hour\n                  <StyledSelect as=\"select\" name=\"price\">\n                    <option value=\"\">To $</option>\n                  </StyledSelect>\n                </label>\n              <label>\n                Car mileage / km\n                <StyledMileageDiv>\n                  <StyledInputFrom\n                    name=\"mileageFrom\"\n                    type=\"number\"\n                    placeholder=\"From\"\n                  />\n                  <StyledInputTo\n                    placeholder=\"To\"\n                    name=\"mileageTo\"\n                    type=\"number\"\n                  />\n                </StyledMileageDiv>\n              </label>\n\n              <button type=\"submit\">Submit</button>\n            </StyledForm>\n          </Formik>\n          <StyledUl>\n            {cars.map(car => {\n              return (\n                <CarCard\n                  car={car}\n                  key={car.id}\n                  modal={setModalIsOpen}\n                ></CarCard>\n              );\n            })}\n          </StyledUl>\n<StyledLoadMoreDiv>{total? <StyledBtnLoadMore onClick={() => dispatch(loadMore(filter))}>Load more</StyledBtnLoadMore> : <div></div>}</StyledLoadMoreDiv>\n          <Modal modalIsOpen={modalIsOpen} closeModal={closeModal}/>\n        </StyledContainer>\n      </StyledSection>\n    </main>\n  );\n};\nexport default Catalog;\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","modalIsOpen","setModalIsOpen","dispatch","useDispatch","filter","useSelector","state","cars","items","total","useEffect","ReactModal","getFilteredCars","id","initialValues","brand","price","mileage","onSubmit","e","changeFilter","name","type","list","placeholder","marks","mark","value","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","as","map","car","CarCard","modal","onClick","loadMore","Modal","closeModal","changeChoosenCar"],"sourceRoot":""}