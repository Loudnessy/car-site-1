{"version":3,"file":"static/js/514.8f7eeff3.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/Catalog/Catalog.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useEffect, useState } from 'react';\nimport {\n  StyledArrowSvg,\n  StyledBrandInput,\n  StyledBrandsList,\n  StyledBtnLoadMore,\n  StyledContainer,\n  StyledDivBrandInput,\n  StyledForm,\n  StyledInputFrom,\n  StyledInputTo,\n  StyledLoadMoreDiv,\n  StyledMileageDiv,\n  StyledPriceInput,\n  StyledPriceList,\n  StyledSection,\n  StyledUl,\n} from './Catalog.styled';\nimport ReactModal from 'react-modal';\nimport marks from '../../car-marks/makes.json';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilteredCars, loadMore } from 'api/api';\nimport { CarCard } from 'components/CarCard/CarCard';\nimport { changeFilter } from 'redux/slices/filterSlice';\nimport { changeChoosenCar } from 'redux/slices/carsSlice';\nimport { Modal } from 'components/Modal/Modal';\nimport sprite from '../../images/svg/sprite.svg';\nconst Catalog = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [brandInputFocus, setBrandInputFocus] = useState(false);\n  const [priceSelectFocus, setPriceSelectFocus] = useState(false);\n\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n  const cars = useSelector(state => state.cars.items);\n  const total = useSelector(state => state.cars.total);\n  const carRentPrices = [\n    '0',\n    '10',\n    '20',\n    '30',\n    '40',\n    '50',\n    '60',\n    '70',\n    '80',\n    '90',\n    '100',\n    '110',\n    '120',\n    '130',\n    '140',\n    '150',\n  ];\n\n  useEffect(() => {\n    ReactModal.setAppElement('#main');\n    dispatch(getFilteredCars(filter));\n  }, [filter, dispatch]);\n  const closeModal = () => {\n    setModalIsOpen(false);\n    dispatch(changeChoosenCar(''));\n  };\n  return (\n    <main>\n      <StyledSection>\n        <StyledContainer id=\"main\">\n          <Formik\n            initialValues={{ brand: '', price: '', mileage: '' }}\n            onSubmit={e => dispatch(changeFilter(e))}\n          >\n            {props => (\n              <StyledForm>\n                <label>\n                  Car brand\n                  <StyledDivBrandInput>\n                    <StyledBrandInput\n                      value={props.values.brand}\n                      name=\"brand\"\n                      type=\"text\"\n                      list=\"brands\"\n                      placeholder=\"Enter the text\"\n                      onClick={e => setBrandInputFocus(true)}\n                      onBlur={() => setBrandInputFocus(false)}\n                      autoComplete=\"off\"\n                    />\n                    <StyledArrowSvg width=\"20\" height=\"20\">\n                      {brandInputFocus ? (\n                        <use href={sprite + '#arrowup'}></use>\n                      ) : (\n                        <use href={sprite + '#arrowdown'}></use>\n                      )}\n                    </StyledArrowSvg>\n                    {brandInputFocus ? (\n                      <StyledBrandsList\n                        onMouseDown={e => {\n                          e.preventDefault();\n                          setBrandInputFocus(false);\n                          props.setFieldValue('brand', e.target.textContent);\n                        }}\n                      >\n                        {marks.map(mark => {\n                          if (\n                            props.values.brand === '' ||\n                            mark\n                              .toUpperCase()\n                              .includes(props.values.brand.toUpperCase())\n                          ) {\n                            return <li key={nanoid()}>{mark}</li>;\n                          } else {\n                            return null;\n                          }\n                        })}\n                      </StyledBrandsList>\n                    ) : (\n                      <></>\n                    )}\n                  </StyledDivBrandInput>\n                </label>\n                <label>\n                  Price/ 1 hour\n                  <StyledDivBrandInput>\n                    <StyledPriceInput\n                      type=\"number\"\n                      name=\"price\"\n                      placeholder=\"To $\"\n                      value={props.values.price}\n                      onClick={() => setPriceSelectFocus(true)}\n                      onBlur={() => setPriceSelectFocus(false)}\n                    />\n                    {priceSelectFocus ? (\n                      <StyledPriceList\n                        onMouseDown={e => {\n                          e.preventDefault();\n                          setPriceSelectFocus(false);\n                          props.setFieldValue('price', e.target.textContent);\n                        }}\n                      >\n                        {carRentPrices.map(price => {\n                          if (\n                            props.values.price === '' ||\n                            price.includes(props.values.price)\n                          ) {\n                            return (\n                              <li key={nanoid()} name={price}>\n                                {price}\n                              </li>\n                            );\n                          } else {\n                            return null;\n                          }\n                        })}\n                      </StyledPriceList>\n                    ) : (\n                      <></>\n                    )}\n                  </StyledDivBrandInput>\n                </label>\n                <label>\n                  Car mileage / km\n                  <StyledMileageDiv>\n                    <StyledInputFrom\n                      name=\"mileageFrom\"\n                      type=\"number\"\n                      placeholder=\"From\"\n                    />\n                    <StyledInputTo\n                      placeholder=\"To\"\n                      name=\"mileageTo\"\n                      type=\"number\"\n                    />\n                  </StyledMileageDiv>\n                </label>\n\n                <button type=\"submit\">Submit</button>\n              </StyledForm>\n            )}\n          </Formik>\n          <StyledUl>\n            {cars.map(car => {\n              return (\n                <CarCard\n                  car={car}\n                  key={car.id}\n                  modal={setModalIsOpen}\n                ></CarCard>\n              );\n            })}\n          </StyledUl>\n          <StyledLoadMoreDiv>\n            {total ? (\n              <StyledBtnLoadMore onClick={() => dispatch(loadMore(filter))}>\n                Load more\n              </StyledBtnLoadMore>\n            ) : (\n              <div></div>\n            )}\n          </StyledLoadMoreDiv>\n          <Modal modalIsOpen={modalIsOpen} closeModal={closeModal} />\n        </StyledContainer>\n      </StyledSection>\n    </main>\n  );\n};\nexport default Catalog;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","modalIsOpen","setModalIsOpen","brandInputFocus","setBrandInputFocus","priceSelectFocus","setPriceSelectFocus","dispatch","useDispatch","filter","useSelector","state","cars","items","total","carRentPrices","useEffect","ReactModal","getFilteredCars","initialValues","brand","price","mileage","onSubmit","e","changeFilter","props","value","values","name","type","list","placeholder","onClick","onBlur","autoComplete","width","height","href","sprite","onMouseDown","preventDefault","setFieldValue","target","textContent","marks","mark","includes","map","car","CarCard","modal","loadMore","Modal","closeModal","changeChoosenCar"],"sourceRoot":""}